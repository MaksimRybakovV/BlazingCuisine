@page "/search/{SearchTerm}"
@inject HttpClient _client
@inject NavigationManager _navigation

<PageTitle>Search Recipe - Blazing Cuisine</PageTitle>

<div class="container-fluid mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="/">Home</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">Search</li>
        </ol>
    </nav>
</div>

@if (_recipes is null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="container-fluid mt-4">
        <RecipeSearch IsHome=false></RecipeSearch>
        <h3 сlass="my-5">Search results for "@SearchTerm"</h3>
        <SearchFilter SearchTerm="@SearchTerm" OnFiltered="HandleUpdateFilters" Category="@Category" Difficulty="Difficulty" TimeInMinutes="TimeInMinutes"></SearchFilter>
        <div class="row">
            <div class="col-lg-12 col-md-12">
                <RecipeDetails Recipe="_selectedRecipe" />
                <div class="row">
                    @foreach (var recipe in _recipes)
                    {
                        <div class="col-lg-4 col-md-6 mt-4">
                            <RecipeCard Recipe="recipe" OnSelected="HandleRecipeSelected"></RecipeCard>
                        </div>
                    }
                </div>
            </div>
        </div>
        @if(_recipes.Count() > 0)
        {
            <CardPagination IsMobile="true" Page="Page" PageCount="_pageCount"></CardPagination>
            <CardPagination IsMobile="false" Page="Page" PageCount="_pageCount"></CardPagination>
        }
    </div>
}

@code {
    private GetRecipeHeaderDto? _selectedRecipe;
    private IEnumerable<GetRecipeHeaderDto>? _recipes;

    private int _pageSize = 1;
    private int _pageCount;

    [Parameter]
    public string SearchTerm { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public int Page { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? Category { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public int? TimeInMinutes { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public int? Difficulty { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (Category == null && TimeInMinutes == null && Difficulty == null)
            await LoadData(Page, _pageSize);
        else
            await UpdateFilters(Page, _pageSize);
    }

    private async Task LoadData(int page, int pageSize)
    {
        try
        {
            var response = await _client.GetFromJsonAsync<PageServiceResponse<List<GetRecipeHeaderDto>>>($"api/recipes/search/pagination?searchterm={SearchTerm}&page={page}&pagesize={pageSize}");

            if (response?.Data is not null)
                _recipes = response.Data;

            _pageCount = response!.PageCount;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading recipes data: {ex.Message}");
        }
    }

    private async Task UpdateFilters(int page, int pageSize)
    {
        var pointer = _navigation.Uri.IndexOf("?");
        var str = _navigation.Uri.Substring(pointer + 8);

        try
        {
            var response = await _client.GetFromJsonAsync<PageServiceResponse<List<GetRecipeHeaderDto>>>($"api/recipes/search/pagination?searchterm={SearchTerm}&page={page}&pagesize={_pageSize}&{str}");

            if (response?.Data is not null)
                _recipes = response.Data;

            _pageCount = response!.PageCount;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading recipes data: {ex.Message}");
        }
    }

    private void HandleRecipeSelected(GetRecipeHeaderDto trail)
    {
        _selectedRecipe = trail;
    }

    private void HandleUpdateFilters()
    {
        _selectedRecipe = null;
    }
}