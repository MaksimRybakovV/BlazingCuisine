@page "/"
@inject NavigationManager _navigation
@inject HttpClient _client

@if(_recipes is null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="container-fluid mt-4">
        <RecipeSearch IsHome=true></RecipeSearch>
        <div class="row">
            <div class="col-lg-12 col-md-12">
                <RecipeDetails Recipe="_selectedRecipe" />
                <ViewSwither Items="_recipes" Context="recipe">
                    <GridTemplate>
                        <div class="col-lg-4 col-md-6 mt-4">
                            <RecipeCard Recipe="recipe" OnSelected="HandleRecipeSelected"></RecipeCard>
                        </div>
                    </GridTemplate>
                    <HeaderTemplate>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Cooking Time</th>
                        <th>Difficulty</th>
                        <th></th>
                    </HeaderTemplate>
                    <RowTemplate>
                        <th>@recipe.Name</th>
                        <td>@recipe.Category?.Name</td>
                        <td>@recipe.TimeFormatter</td>
                        <td>@recipe.Difficulty</td>
                        <td class="text-end">
                            <button class="btn btn-primary"
                                    @onclick="() => HandleRecipeSelected(recipe)">
                                <i class="fa-regular fa-eye"></i>
                            </button>
                        </td>
                    </RowTemplate> 
                </ViewSwither>
            </div>
        </div>
        @if (_recipes.Count() > 0 && _pageCount > 1)
        {
            <CardPagination IsMobile="true" Page="Page" PageCount="_pageCount"></CardPagination>
            <CardPagination IsMobile="false" Page="Page" PageCount="_pageCount"></CardPagination>
        }
    </div>
}

@code {
    private IEnumerable<GetRecipeHeaderDto>? _recipes;
    private GetRecipeHeaderDto? _selectedRecipe;

    private int _pageSize = 9;
    private int _pageCount;

    [Parameter, SupplyParameterFromQuery]
    public int Page { get; set; }

    protected override void OnInitialized()
    {
        var uriWithQuerystring = _navigation.GetUriWithQueryParameters(
            new Dictionary<string, object?>()
                {
                    ["Page"] = 1
                });
        _navigation.NavigateTo(uriWithQuerystring);
    }

    protected async override Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var response = await _client.GetFromJsonAsync<PageServiceResponse<List<GetRecipeHeaderDto>>>($"api/recipes/pagination?page={Page}&pagesize={_pageSize}");

            if (response?.Data is not null)
                _recipes = response.Data;

            _pageCount = response!.PageCount;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading recipes data: {ex.Message}");
        }
    }

    private void HandleRecipeSelected(GetRecipeHeaderDto trail)
    {
        _selectedRecipe = trail;
    }
}