@page "/categories/{CategoryName}"
@using System.Security.Claims
@using BlazingCuisine.Client.Features.Shared
@inject NavigationManager _navigation
@inject HttpClient _client

<PageTitle>@(CategoryName) - Blazing Cuisine</PageTitle>

<div class="container-fluid">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="/?Page=1">Home</a>
            </li>
            <li class="breadcrumb-item">
                <a href="/categories">Categories</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">@(CategoryName)</li>
        </ol>
    </nav>
</div>

@if(_recipes is null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="container-fluid">
        @if (_recipes.Count() == 0)
        {
            <AuthorizeView>
                <Authorized>
                    <NoRecipes>
                        We currently don't have any recipe, <a href="add-recipe">why not add one?</a>.
                    </NoRecipes>
                </Authorized>
                <NotAuthorized>
                    <NoRecipes>
                        We currently don't have any recipe, why not add one? Please <a href="authentication/login">log in or sign up</a>.
                    </NoRecipes>
                </NotAuthorized>
            </AuthorizeView>
        }
        else
        {
            <AuthorizeView>
                <Authorized>
                    <div class="mb-4">
                        <h3 class="fst-italic text-center">Do you have an awesome recipe you'd like to share? <a href="add-recipe">Add it here</a>.</h3>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="mb-4">
                        <h3 class="fst-italic text-center">Do you have an awesome recipe you'd like to share? Please <a href="authentication/login">log in or sign up</a>.</h3>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
            <div class="row">
                <div class="col-lg-12 col-md-12">
                    <RecipeDetails Recipe="_selectedRecipe" />
                    <ViewSwither Items="_recipes" Context="recipe">
                        <GridTemplate>
                            <div class="col-lg-4 col-md-6 mt-4">
                                <RecipeCard Recipe="recipe" OnSelected="HandleRecipeSelected"></RecipeCard>
                            </div>
                        </GridTemplate>
                        <HeaderTemplate>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Cooking Time</th>
                            <th>Difficulty</th>
                            <th></th>
                        </HeaderTemplate>
                        <RowTemplate>
                            <th>@recipe.Name</th>
                            <td>@recipe.Category?.Name</td>
                            <td>@recipe.TimeFormatter</td>
                            <td>@recipe.Difficulty</td>
                            <td class="text-end">
                                <button class="btn btn-primary"
                                        @onclick="() => HandleRecipeSelected(recipe)">
                                    <i class="fa-regular fa-eye"></i>
                                </button>
                                <FavoriteButton Recipe="recipe" />
                                <AuthorizeView>
                                    @if (recipe.Owner == @context.User.Claims.Where(c => c.Type == ClaimTypes.Name).Select(c => c.Value).FirstOrDefault())
                                    {
                                        <button class="btn btn-outline-primary"
                                                @onclick="@(() => _navigation.NavigateTo($"edit-recipe/{recipe.Id}"))">
                                            <i class="fa-solid fa-pen"></i>
                                        </button>
                                    }
                                </AuthorizeView>
                            </td>
                        </RowTemplate>
                    </ViewSwither>
                </div>
            </div>
        }
        @if (_recipes.Count() > 0 && _pageCount > 1)
        {
            <CardPagination IsMobile="true" Page="Page" PageCount="_pageCount"></CardPagination>
            <CardPagination IsMobile="false" Page="Page" PageCount="_pageCount"></CardPagination>
        }
    </div>
}

@code {
    private IEnumerable<GetRecipeHeaderDto>? _recipes;
    private GetRecipeHeaderDto? _selectedRecipe;

    private int _pageSize = 9;
    private int _pageCount;

    [Parameter]
    public string CategoryName { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public int Page { get; set; }

    protected override void OnInitialized()
    {
        var uriWithQuerystring = _navigation.GetUriWithQueryParameters(
            new Dictionary<string, object?>()
                {
                    ["Page"] = 1
                });
        _navigation.NavigateTo(uriWithQuerystring);
    }

    protected async override Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var response = await _client.GetFromJsonAsync<PageServiceResponse<List<GetRecipeHeaderDto>>>($"api/recipes/category/pagination?category={CategoryName}&page={Page}&pagesize={_pageSize}");

            if (response?.Data is not null)
                _recipes = response.Data;

            _pageCount = response!.PageCount;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading recipes data: {ex.Message}");
        }
    }

    private void HandleRecipeSelected(GetRecipeHeaderDto trail)
    {
        _selectedRecipe = trail;
    }
}
