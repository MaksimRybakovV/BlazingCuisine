@page "/add-recipe"
@inject HttpClient _client

<PageTitle>Add Recipe - Blazing Cuisine</PageTitle>

<div class="container-fluid mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="/">Home</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">Add Recipe</li>
        </ol>
    </nav>
</div>

<div class="container-fluid">
    <h3 class="my-4">Add a recipe</h3>
</div>

<EditForm OnValidSubmit="SubmitForm" EditContext="_editContext">
    <FluentValidationValidator />
    <div class="container-fluid my-4">
        <FormSection Title="Basic Details" HelpText="This information is used to identify the recipe and can be used for search to help site visitors find it.">
            <FormFieldSet Width="col-6">
                <label for="recipeName"
                       class="fw-bold text-secondary mb-2">Name</label>
                <InputText @bind-Value="_recipe.Name"
                           class="form-control"
                           id="recipeName" />
                <ValidationMessage For="@(() => _recipe.Name)" />
            </FormFieldSet>
            <FormFieldSet>
                <label for="recipeInstruction"
                       class="fw-bold text-secondary mb-2">Instruction</label>
                <InputTextArea @bind-Value="_recipe.Instruction"
                               rows="6"
                               class="form-control"
                               id="recipeInstruction" />
                <ValidationMessage For="@(() => _recipe.Instruction)" />
            </FormFieldSet>
        </FormSection>
        <FormSection Title="Difficulty, category and time" HelpText="Help other site visitors choose the best recipes by informing them about the category, difficulty and cooking time.">
            <FormFieldSet Width="col-3">
                <label for="recipeDifficulty"
                       class="fw-bold text-secondary mb-2">Difficulty</label>
                <InputSelect id="recipeDifficulty" @bind-Value="_recipe.Difficulty" class="form-select">
                    @foreach (var difficulty in Enum.GetValues(typeof(Difficulty)))
                    {
                        <option value="@difficulty">@difficulty</option>
                    }
                </InputSelect>
            </FormFieldSet>
            <FormFieldSet Width="col-3">
                <label for="recipeCategory"
                       class="fw-bold text-secondary mb-2">Category</label>
                <InputSelect id="recipeCategory" @bind-Value="_recipe.CategoryId" class="form-select">
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </FormFieldSet>
            <FormFieldSet Width="col-3">
                <label for="recipeTime"
                       class="fw-bold text-secondary mb-2">Cooking Time In Minutes</label>
                <InputNumber @bind-Value="_recipe.CookingTimeInMinutes"
                             class="form-control"
                             id="recipeTime" />
                <ValidationMessage For="@(() => _recipe.CookingTimeInMinutes)" />
            </FormFieldSet>
        </FormSection>
        <FormSection Title="Ingredients" HelpText="Add the ingredients needed to prepare the dish.">
            @{
                var i = 0;
            }
            @foreach(var ingredient in _recipe.Ingredients)
            {
                i++;

                <div class="row">
                    <div class="col-2">
                        <div class="mb-3">
                            <label class="fw-bold text-secondary mb-2">Ingredient</label>
                            <p>@i</p>
                        </div>
                    </div>
                    <div class="col">
                        <div class="mb-3">
                            <label for="recipeIngredient"
                                   class="fw-bold text-secondary mb-2">Description</label>
                            <InputText @bind-Value="ingredient.Text"
                                       class="form-control"
                                       id="recipeIngredient" />
                            <ValidationMessage For="@(() => ingredient.Text)" />
                        </div>
                    </div>
                    <div class="col-1 d-flex mt-3">
                        <button class="btn btn-link"
                                type="button"
                                @onclick="@(() => _recipe.Ingredients.Remove(ingredient))">
                            <i class="fa-regular fa-circle-xmark"></i>
                        </button>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col">
                    <button class="btn btn-outline-primary"
                            type="button"
                            @onclick=@(() => _recipe.Ingredients.Add(new()))>Add ingredient</button>
                    <ValidationMessage For="@(() => _recipe.Ingredients)" />
                </div>
            </div>
        </FormSection>
        <div class="row">
            <div class="col-4 offset-8 text-end">
                <button class="btn btn-outline-secondary"
                        type="button"
                        @onclick="@(() => _recipe = new AddRecipeDto { CategoryId = 1, Ingredients = new(), Difficulty = Difficulty.Easy })">
                    Reset
                </button>
                <button class="btn btn-primary"
                        type="submit">Submit</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private EditContext _editContext = default!;
    private AddRecipeDto _recipe = new AddRecipeDto
    {
        CategoryId = 1,
        Ingredients = new(),
        Difficulty = Difficulty.Easy
    };
    private IEnumerable<Category> _categories = new List<Category>();

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_recipe);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    protected async override Task OnInitializedAsync()
    {
        var response = await _client.GetFromJsonAsync<ServiceResponse<List<Category>>>("api/categories");

        if (response!.Data is not null)
            _categories = response.Data;
    }

    private async Task SubmitForm()
    {
        await _client.PostAsJsonAsync("api/recipes", _recipe);
    }
}
